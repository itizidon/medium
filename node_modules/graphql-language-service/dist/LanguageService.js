"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageService = void 0;
const graphql_1 = require("graphql");
const graphql_language_service_interface_1 = require("graphql-language-service-interface");
const schemaLoader_1 = require("./schemaLoader");
class LanguageService {
    constructor({ parser, schemaLoader, schemaBuilder, schemaConfig, rawSchema, parseOptions, }) {
        this._parser = graphql_1.parse;
        this._schema = null;
        this._schemaResponse = null;
        this._schemaLoader = schemaLoader_1.defaultSchemaLoader;
        this._schemaBuilder = schemaLoader_1.defaultSchemaBuilder;
        this._rawSchema = null;
        this._parseOptions = undefined;
        this.getCompletion = (_uri, documentText, position) => __awaiter(this, void 0, void 0, function* () { return graphql_language_service_interface_1.getAutocompleteSuggestions(yield this.getSchema(), documentText, position); });
        this.getDiagnostics = (_uri, documentText, customRules) => __awaiter(this, void 0, void 0, function* () {
            if (!documentText || documentText.length < 1) {
                return [];
            }
            return graphql_language_service_interface_1.getDiagnostics(documentText, yield this.getSchema(), customRules);
        });
        this.getHover = (_uri, documentText, position) => __awaiter(this, void 0, void 0, function* () { return graphql_language_service_interface_1.getHoverInformation(yield this.getSchema(), documentText, position); });
        this._schemaConfig = schemaConfig;
        if (parser) {
            this._parser = parser;
        }
        if (schemaLoader) {
            this._schemaLoader = schemaLoader;
        }
        if (schemaBuilder) {
            this._schemaBuilder = schemaBuilder;
        }
        if (rawSchema) {
            this._rawSchema = rawSchema;
        }
        if (parseOptions) {
            this._parseOptions = parseOptions;
        }
    }
    get schema() {
        return this._schema;
    }
    getSchema() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.schema) {
                return this.schema;
            }
            return this.loadSchema();
        });
    }
    setSchema(schema) {
        return __awaiter(this, void 0, void 0, function* () {
            this._rawSchema = schema;
            return this.loadSchema();
        });
    }
    getSchemaResponse() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._schemaResponse) {
                return this._schemaResponse;
            }
            return this.loadSchemaResponse();
        });
    }
    loadSchemaResponse() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (this._rawSchema) {
                return typeof this._rawSchema === 'string'
                    ? this.parse(this._rawSchema)
                    : this._rawSchema;
            }
            if (!((_a = this._schemaConfig) === null || _a === void 0 ? void 0 : _a.uri)) {
                throw new Error('uri missing');
            }
            this._schemaResponse = (yield this._schemaLoader(this._schemaConfig));
            return this._schemaResponse;
        });
    }
    loadSchema() {
        return __awaiter(this, void 0, void 0, function* () {
            const schemaResponse = yield this.loadSchemaResponse();
            this._schema = this._schemaBuilder(schemaResponse, this._schemaConfig.buildSchemaOptions);
            return this._schema;
        });
    }
    parse(text, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._parser(text, options || this._parseOptions);
        });
    }
}
exports.LanguageService = LanguageService;
//# sourceMappingURL=LanguageService.js.map