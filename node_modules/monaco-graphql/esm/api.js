var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
define(["require", "exports", "monaco-editor"], function (require, exports, monaco_editor_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class LanguageServiceAPI {
        constructor({ languageId, schemaConfig, modeConfiguration, formattingOptions, }) {
            this._onDidChange = new monaco_editor_1.Emitter();
            this._worker = null;
            this._languageId = languageId;
            this.setSchemaConfig(schemaConfig);
            this.setModeConfiguration(modeConfiguration);
            this.setFormattingOptions(formattingOptions);
        }
        get onDidChange() {
            return this._onDidChange.event;
        }
        get languageId() {
            return this._languageId;
        }
        get modeConfiguration() {
            return this._modeConfiguration;
        }
        get schemaConfig() {
            return this._schemaConfig;
        }
        get formattingOptions() {
            return this._formattingOptions;
        }
        get worker() {
            return this._worker;
        }
        setWorker(worker) {
            this._worker = worker;
        }
        getSchema() {
            return __awaiter(this, void 0, void 0, function* () {
                const langWorker = yield this.worker();
                return langWorker.getSchemaResponse();
            });
        }
        setSchema(schema) {
            return __awaiter(this, void 0, void 0, function* () {
                const langWorker = yield this.worker();
                yield langWorker.setSchema(schema);
                this._onDidChange.fire(this);
            });
        }
        parse(graphqlString) {
            return __awaiter(this, void 0, void 0, function* () {
                const langWorker = yield this.worker();
                return langWorker.doParse(graphqlString);
            });
        }
        setSchemaConfig(options) {
            this._schemaConfig = options || Object.create(null);
            this._onDidChange.fire(this);
        }
        updateSchemaConfig(options) {
            this._schemaConfig = Object.assign(Object.assign({}, this._schemaConfig), options);
            this._onDidChange.fire(this);
        }
        setSchemaUri(schemaUri) {
            this.setSchemaConfig(Object.assign(Object.assign({}, this._schemaConfig), { uri: schemaUri }));
        }
        setModeConfiguration(modeConfiguration) {
            this._modeConfiguration = modeConfiguration || Object.create(null);
            this._onDidChange.fire(this);
        }
        setFormattingOptions(formattingOptions) {
            this._formattingOptions = formattingOptions || Object.create(null);
            this._onDidChange.fire(this);
        }
    }
    exports.LanguageServiceAPI = LanguageServiceAPI;
    exports.modeConfigurationDefault = {
        documentFormattingEdits: true,
        documentRangeFormattingEdits: false,
        completionItems: true,
        hovers: true,
        documentSymbols: false,
        tokens: false,
        colors: false,
        foldingRanges: false,
        diagnostics: true,
        selectionRanges: false,
    };
    exports.schemaDefault = {
        uri: 'http://localhost:8000',
    };
    exports.formattingDefaults = {
        prettierConfig: {
            tabWidth: 2,
        },
    };
});
//# sourceMappingURL=api.js.map